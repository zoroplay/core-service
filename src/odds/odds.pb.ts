// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.28.2
// source: odds.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "protobuf";

/** The request message containing the selection details. */
export interface GetOddsRequest {
  producerID: number;
  eventID: number;
  marketID: number;
  specifier: string;
  outcomeID: string;
}

/** The response message containing the odds status */
export interface GetOddsReply {
  odds: number;
  status: number;
  statusName: string;
  active: number;
}

/** The request message containing the producerID. */
export interface ProducerStatusRequest {
  producer: number;
}

/** The response message containing the producer status */
export interface ProducerStatusReply {
  status: number;
}

export interface Probability {
  probability: number;
}

export const PROTOBUF_PACKAGE_NAME = "protobuf";

/** The Odds service definition. */

export interface OddsClient {
  /** Sends GetOdds status request */

  getOdds(request: GetOddsRequest): Observable<GetOddsReply>;

  getProducerStatus(request: ProducerStatusRequest): Observable<ProducerStatusReply>;

  getProbability(request: GetOddsRequest): Observable<Probability>;
}

/** The Odds service definition. */

export interface OddsController {
  /** Sends GetOdds status request */

  getOdds(request: GetOddsRequest): Promise<GetOddsReply> | Observable<GetOddsReply> | GetOddsReply;

  getProducerStatus(
    request: ProducerStatusRequest,
  ): Promise<ProducerStatusReply> | Observable<ProducerStatusReply> | ProducerStatusReply;

  getProbability(request: GetOddsRequest): Promise<Probability> | Observable<Probability> | Probability;
}

export function OddsControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getOdds", "getProducerStatus", "getProbability"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Odds", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Odds", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ODDS_SERVICE_NAME = "Odds";
