
stages:
  - version
  - test
  - build
  - deploy


default:
  image: docker:24.0.5

services:
  - docker:24.0.5-dind

variables:
  IDENTITY_SERVICE_URL: 134.122.17.21:9011
  FIXTURE_SERVICE_URL: 134.122.17.21:9003
  BETTING_SERVICE_URL: 134.122.17.21:9001
  WALLET_SERVICE_URL: 134.122.17.21:9013
  NOTIFICATION_SERVICE_URL: 134.122.17.21:9009
  BONUS_SERVICE_URL: 134.122.17.21:9006
  GAMING_SERVICE_URL: 134.122.17.21:9015
  GITHUB_TOKEN: $GITHUB_TOKEN  # Store this in GitLab CI/CD Variables

get-new-version:
  stage: version
  image: node:20
  script:
    - echo "Setting new version..."
    - yarn install
    - npx semantic-release --dry-run
    - echo $VERSION > .VERSION  # Save the version to a file
  artifacts:
    paths:
      - .VERSION
    expire_in: "90 days"

# Test Stage
test:
  stage: test
  dependencies:
    - get-new-version  # Ensure that test stage depends on version stage and gets the .VERSION file
  script:
    - cat .VERSION  # Output the version for debugging


## Build Stage
build:
  stage: build
  dependencies:
    - get-new-version  # Ensure we get the version file from the version stage
  before_script:
    - echo "Logging into Docker registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - if [ ! -f .VERSION ]; then echo "ERROR: .VERSION file is missing"; exit 1; fi  # Ensure the .VERSION file exists
    - export VERSION=$(cat .VERSION)
    - if [ -z "$VERSION" ]; then echo "ERROR: Version is empty"; exit 1; fi  # Ensure the VERSION is not empty
    - echo "Building Docker image with version $VERSION"
    - docker build -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION" .
    - docker push "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION" || { echo "Docker push failed"; exit 1; }
    - echo "Finished building Docker image with tag $VERSION"
  only:
    - main

# Deploy Stage
deploy:
  stage: deploy
  dependencies:
    - build  # Ensure we have the version from the build stage
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - export VERSION=$(cat .VERSION)  # Load the version from the .VERSION file
  script:
    - echo "Deploying Docker container with version $VERSION"
    - docker pull "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION"  # Pull the built Docker image
    - docker stop gatewayservice || true  # Stop any existing container
    - docker rm gatewayservice || true    # Remove the container if it exists
    - docker run -d --name gatewayservice -p 80:80 \
      -e IDENTITY_SERVICE_URL="$IDENTITY_SERVICE_URL" \
      -e FIXTURE_SERVICE_URL="$FIXTURE_SERVICE_URL" \
      -e BETTING_SERVICE_URL="$BETTING_SERVICE_URL" \
      -e WALLET_SERVICE_URL="$WALLET_SERVICE_URL" \
      -e NOTIFICATION_SERVICE_URL="$NOTIFICATION_SERVICE_URL" \
      -e BONUS_SERVICE_URL="$BONUS_SERVICE_URL" \
      -e GAMING_SERVICE_URL="$GAMING_SERVICE_URL" \
      "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION"
  only:
    - main
