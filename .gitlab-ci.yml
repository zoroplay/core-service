stages:
  - test
  - build
  - deploy

variables:
  IDENTITY_SERVICE_URL: 134.122.17.21:9011
  FIXTURE_SERVICE_URL: 134.122.17.21:9003
  BETTING_SERVICE_URL: 134.122.17.21:9001
  WALLET_SERVICE_URL: 134.122.17.21:9013
  NOTIFICATION_SERVICE_URL: 134.122.17.21:9009
  BONUS_SERVICE_URL: 134.122.17.21:9006
  GAMING_SERVICE_URL: 134.122.17.21:9015
  GITHUB_TOKEN: $GITHUB_TOKEN  # Store this in GitLab CI/CD Variables

# Test Stage
test:
  stage: test
  image: node:20  # Use Node.js 20 for testing and semantic-release
  script:
    - echo "Configuring Git..."
    - git config --global user.name "zoroplay"
    - git config --global user.email "sportsbookengine@gmail.com"
    - git remote set-url origin https://github.com/zoroplay/gateway-service.git
    - echo "Running Semantic Release..."
    - npx semantic-release  # Run semantic-release for versioning

# Build Stage
build:
  stage: build
  image: node:20  # Use Node.js with Docker in Docker
  services:
    - docker:dind  # Docker-in-Docker service to build Docker images

  before_script:
    - echo "Logging into Docker registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

  script:
    - echo "Running Semantic Release..."
    - npx semantic-release  # Run Semantic Release to analyze commits and trigger a version bump
    
    # Get the new version from package.json after semantic-release
    - export VERSION=$(node -p "require('./package.json').version")

    # Log the new version
    - echo "Building Docker image with version $VERSION"
    
    # Build and push Docker image with the new version
    - docker build -t "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION" .
    - docker push "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION" || { echo "Docker push failed"; exit 1; }
    - echo "Finished building Docker image with tag $VERSION"

  only:
    - main

  artifacts:
    reports:
      dotenv: .env  # Save the version for the deploy stage

# Deploy Stage
deploy:
  stage: deploy
  image: docker:latest  # Use Docker for deployment
  services:
    - docker:dind  # Docker-in-Docker service for deploying Docker containers

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

  script:
    - source .env  # Load the version from the build stage
    - echo "Deploying Docker container..."
    - docker pull "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION"  # Use the version from the build stage
    - docker stop gatewayservice || true  # Stop any existing container
    - docker rm gatewayservice || true    # Remove the container if it exists
    - docker run -d --name gatewayservice -p 80:80 \
      -e IDENTITY_SERVICE_URL="$IDENTITY_SERVICE_URL" \
      -e FIXTURE_SERVICE_URL="$FIXTURE_SERVICE_URL" \
      -e BETTING_SERVICE_URL="$BETTING_SERVICE_URL" \
      -e WALLET_SERVICE_URL="$WALLET_SERVICE_URL" \
      -e NOTIFICATION_SERVICE_URL="$NOTIFICATION_SERVICE_URL" \
      -e BONUS_SERVICE_URL="$BONUS_SERVICE_URL" \
      -e GAMING_SERVICE_URL="$GAMING_SERVICE_URL" \
      "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION"

  only:
    - main
