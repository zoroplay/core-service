# Define stages
stages:
  - test
  - build
  - release
  - deploy

# Cache dependencies to speed up builds
cache:
  key: npm-cache
  paths:
    - node_modules/


variables:
  NEXT_VERSION: 0.0.1



# Test Stage
test:
  stage: test
  image: node:18
  script:
    - echo "Running tests..."
    - npm install
    - npm test  # Run tests to validate code
  only:
    - main



# Build Stage
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind # Docker-in-Docker service to build Docker images
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - main

# Release Stage
#release:
  #stage: release
  #image: node:18
  #script:
  #  - npm install
   # - npx semantic-release
  #only:
    - main
  #variables:
   # GITHUB_TOKEN: $CI_JOB_TOKEN  # Ensure this token has the necessary permissions

# Deploy Stage
deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Deploying Docker container..."
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker stop gatewayservice || true  # Stop any existing container
    - docker rm gatewayservice || true    # Remove the container if it exists
    - docker run -d --name gatewayservice -p 80:80 $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - main
