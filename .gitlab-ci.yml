stages:
  - test
  - build
  - deploy

variables:
  IDENTITY_SERVICE_URL: 134.122.17.21:9011
  FIXTURE_SERVICE_URL: 134.122.17.21:9003
  BETTING_SERVICE_URL: 134.122.17.21:9001
  WALLET_SERVICE_URL: 134.122.17.21:9013
  NOTIFICATION_SERVICE_URL: 134.122.17.21:9009
  BONUS_SERVICE_URL: 134.122.17.21:9006
  GAMING_SERVICE_URL: 134.122.17.21:9015
  GITHUB_TOKEN: $GITHUB_TOKEN  # Store this in GitLab CI/CD Variables

# Caching for yarn dependencies
cache:
  paths:
    - node_modules/

# Test Stage
test:
  stage: test
  image: node:20

  before_script:
    - git config --global url."https://$GITHUB_TOKEN@github.com/".insteadOf "https://github.com/"
    - apt-get update && apt-get install -y protobuf-compiler  # Install protoc
    - yarn install  # Install dependencies
    - yarn proto:all  # Generate protobuf files before running the tests
    # Ensure the Jest binary is available in the path
    - export PATH=$(yarn bin):$PATH
    
    # Create temporary tsconfig for tests
    - |
      echo '{
        "compilerOptions": {
          "module": "commonjs",
          "target": "es2017",
          "baseUrl": "./",
          "paths": {
            "src/*": ["./src/*"]
          },
          "allowSyntheticDefaultImports": true,
          "emitDecoratorMetadata": true,
          "experimentalDecorators": true,
          "skipLibCheck": true,
          "strictNullChecks": false,
          "noImplicitAny": false,
          "noFallthroughCasesInSwitch": false
        }
      }' > tsconfig.test.json  # Temporary tsconfig for testing

  script:
    - echo "Running tests..."
    - jest --config jest.config.js --tsconfig tsconfig.test.json  # Use the temporary tsconfig for Jest
    - echo "Running Semantic Release..."
    - npx semantic-release  # Run Semantic Release to analyze commits and trigger a version bump if necessary

  only:
    - main


# Build Stage
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind  # Docker-in-Docker service to build Docker images

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - echo "Building Docker image with the following service URLs:"
    - echo "IDENTITY_SERVICE_URL ...... $IDENTITY_SERVICE_URL"
    - echo "FIXTURE_SERVICE_URL  ...... $FIXTURE_SERVICE_URL"
    - echo "BETTING_SERVICE_URL ....... $BETTING_SERVICE_URL"
    - echo "WALLET_SERVICE_URL ........ $WALLET_SERVICE_URL"
    - echo "NOTIFICATION_SERVICE_URL ...... $NOTIFICATION_SERVICE_URL"
    - echo "BONUS_SERVICE_URL  ........ $BONUS_SERVICE_URL"
    - echo "GAMING_SERVICE_URL   ...... $GAMING_SERVICE_URL"
    
    # Tag Docker image with short commit hash and timestamp
    - export DOCKER_IMAGE_TAG=$(git rev-parse --short HEAD)-$(date +%Y%m%d%H%M)  
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$DOCKER_IMAGE_TAG .
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$DOCKER_IMAGE_TAG
    - echo "Finished building docker image"

  only:
    - main

# Deploy Stage
deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - export DOCKER_IMAGE_TAG=$(git rev-parse --short HEAD)-$(date +%Y%m%d%H%M)  # Same tag used in build stage
    - echo "Deploying Docker container..."
    - docker pull $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$DOCKER_IMAGE_TAG
    - docker stop gatewayservice || true  # Stop any existing container
    - docker rm gatewayservice || true    # Remove the container if it exists
    - docker run -d --name gatewayservice -p 80:80 \
      -e IDENTITY_SERVICE_URL="$IDENTITY_SERVICE_URL" \
      -e FIXTURE_SERVICE_URL="$FIXTURE_SERVICE_URL" \
      -e BETTING_SERVICE_URL="$BETTING_SERVICE_URL" \
      -e WALLET_SERVICE_URL="$WALLET_SERVICE_URL" \
      -e NOTIFICATION_SERVICE_URL="$NOTIFICATION_SERVICE_URL" \
      -e BONUS_SERVICE_URL="$BONUS_SERVICE_URL" \
      -e GAMING_SERVICE_URL="$GAMING_SERVICE_URL" \
      $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$DOCKER_IMAGE_TAG

  only:
    - main
